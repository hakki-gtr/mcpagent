name: Docker Build

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
  workflow_run:
    workflows: ["Service Validation"]
    types: [completed]

env:
  IMAGE_NAME_BASE: admingentoro/gentoro
  IMAGE_NAME_PRODUCT: admingentoro/gentoro

jobs:
  docker-build:
    name: Docker Build
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' || github.event_name != 'workflow_run' }}
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: .
    
    - name: Verify artifacts for Docker build
      run: |
        echo "Verifying artifacts are available for Docker build..."
        
        # Check mcpagent JAR
        MCPAGENT_JAR=$(find src/mcpagent/target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
        if [ -f "$MCPAGENT_JAR" ]; then
          echo "✅ mcpagent JAR found: $MCPAGENT_JAR"
          ls -la "$MCPAGENT_JAR"
        else
          echo "❌ mcpagent JAR not found"
          exit 1
        fi
        
        # Check acme-analytics-server JAR
        ACME_JAR=$(find src/acme-analytics-server/server/target -name "*.jar" -not -name "*-sources.jar" -not -name "*-javadoc.jar" | head -1)
        if [ -f "$ACME_JAR" ]; then
          echo "✅ acme-analytics-server JAR found: $ACME_JAR"
          ls -la "$ACME_JAR"
        else
          echo "❌ acme-analytics-server JAR not found"
          exit 1
        fi
        
        # Check typescript-runtime dist
        if [ -d "src/typescript-runtime/dist" ]; then
          echo "✅ typescript-runtime dist found"
          ls -la src/typescript-runtime/dist/
        else
          echo "❌ typescript-runtime dist not found"
          exit 1
        fi
    
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Install xmllint
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-utils
    
    - name: Extract version from POM
      id: version
      run: |
        POM_FILE="src/mcpagent/pom.xml"
        CURRENT_VERSION=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" "$POM_FILE")
        VERSION_NUMBER=${CURRENT_VERSION%-SNAPSHOT}
        echo "version=$VERSION_NUMBER" >> $GITHUB_OUTPUT
        echo "full_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
        echo "Current version: $CURRENT_VERSION (testing: $VERSION_NUMBER)"
    
    - name: Build base image
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        echo "Building base image for ${{ matrix.platform }}..."
        ./scripts/docker/build-base.sh "$VERSION" "" --platform "${{ matrix.platform }}"
    
    - name: Build product image
      run: |
        VERSION="${{ steps.version.outputs.version }}"
        POM_VERSION=$(xmllint --xpath "/*[local-name()='project']/*[local-name()='version']/text()" src/mcpagent/pom.xml)
        JAR_NAME="mcpagent-$POM_VERSION.jar"
        echo "Building product image for ${{ matrix.platform }}..."
        
        ./scripts/docker/build-product.sh "$VERSION" "$JAR_NAME" "" --platform "${{ matrix.platform }}"
